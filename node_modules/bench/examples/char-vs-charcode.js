// testing string comparison vs char code comparison
'use strict'

var CHAR_LF = '\n';
var CHARCODE_LF = CHAR_LF.charCodeAt(0);

function charVar (str) {
  return (str === CHAR_LF);
}

function charCodeVar (str) {
  return str.charCodeAt(0) === CHARCODE_LF;
}

function charInline (str) {
  return str === '\n';
}

function charCodeInline (str) {
  return str.charCodeAt(0) === 10;
}

function test (fn) { return function () {
  var str = 'this is a string of characters\nand has multiple lines\n'.split()
  var res = str.map(fn)
}}

exports.compare = {
  charVar: test(charVar),
  charCodeVar: test(charCodeVar),
  charInline: test(charInline),
  charCodeInline: test(charCodeInline),
}

exports.countPerLap = 'this is a string of characters\nand has multiple lines\n'.length

require("../").runMain()

/*

benchmarking /Users/isaacs/dev-src/js/node-bench/examples/array-ify.js
Please be patient.
{ node: '0.5.2-pre',
  v8: '3.4.12.1',
  ares: '1.7.4',
  uv: '0.1',
  openssl: '0.9.8l' }
Scores: (bigger is better)

arrayApply
Raw:
 > 11778.221778221778
 > 12207.792207792209
 > 12815.184815184815
 > 10159.84015984016
 > 12595.404595404596
Average (mean) 11911.288711288711

manualMap
Raw:
 > 10637.362637362638
 > 10522.432701894317
 > 11186.813186813188
 > 9558.441558441558
 > 11064.935064935065
Average (mean) 10593.997029889355

arrayApplyArg
Raw:
 > 9370.62937062937
 > 9648.351648351649
 > 9518.481518481518
 > 9866.133866133867
 > 9996.003996003996
Average (mean) 9679.92007992008

manualMapArg
Raw:
 > 9880.11988011988
 > 9332.667332667334
 > 9550.44955044955
 > 9154.845154845154
 > 10463.536463536464
Average (mean) 9676.323676323675

sliceZeroApply
Raw:
 > 2339.6603396603396
 > 2355.6443556443555
 > 2337.6623376623374
 > 2281.7182817182816
 > 2305.3892215568862
Average (mean) 2324.01490724844

sliceApply
Raw:
 > 2115.884115884116
 > 2185.8141858141857
 > 2175.8241758241757
 > 2223.552894211577
 > 2151.8481518481517
Average (mean) 2170.584704716441

sliceCall
Raw:
 > 2131.868131868132
 > 2029.97002997003
 > 1982.017982017982
 > 2031.968031968032
 > 2049.95004995005
Average (mean) 2045.154845154845

sliceZeroCall
Raw:
 > 2071.928071928072
 > 2001.998001998002
 > 2105.577689243028
 > 1942.057942057942
 > 2039.96003996004
Average (mean) 2032.304349037417

sliceZeroCallArg
Raw:
 > 129.4820717131474
 > 134.65346534653466
 > 128.8404360753221
 > 128.7128712871287
 > 128.8404360753221
Average (mean) 130.10585609949098

sliceZeroApplyArg
Raw:
 > 129.4820717131474
 > 131.34328358208955
 > 129.03225806451613
 > 128.96825396825398
 > 129.35323383084577
Average (mean) 129.63582023177054

sliceCallArg
Raw:
 > 127.11022840119166
 > 124.62908011869436
 > 126.23274161735701
 > 128.8404360753221
 > 123.50597609561753
Average (mean) 126.06369246163653

sliceApplyArg
Raw:
 > 128.33168805528135
 > 121.27236580516899
 > 122.2879684418146
 > 120.67260138476756
 > 120.67260138476756
Average (mean) 122.64744501436

Winner: arrayApply
Compared with next highest (manualMap), it's:
11.06% faster
1.12 times as fast
0.05 order(s) of magnitude faster

Compared with the slowest (sliceApplyArg), it's:
98.97% faster
97.12 times as fast
1.99 order(s) of magnitude faster

*/
